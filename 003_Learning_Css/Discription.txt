/*
Ausgabe von c Programmen
#include <stdio.h>

int main() {
    // Ganzzahl (integer)
    int integerVariable;
    printf("Geben Sie eine Ganzzahl ein: ");
    scanf("%d", &integerVariable);
    printf("Ganzzahl eingegeben: %d\n", integerVariable);

    // Gleitkommazahl (float)
    float floatVariable;
    printf("Geben Sie eine Gleitkommazahl ein: ");
    scanf("%f", &floatVariable);
    printf("Gleitkommazahl eingegeben: %f\n", floatVariable);

    // Zeichen (char)
    char charVariable;
    printf("Geben Sie ein Zeichen ein: ");
    scanf(" %c", &charVariable); // Achten Sie auf das Leerzeichen vor %c, um vorherige Whitespaces zu ignorieren
    printf("Zeichen eingegeben: %c\n", charVariable);

    // Zeichenkette (string)
    char stringVariable[100]; // Annahme: Maximale LÃ¤nge der Zeichenkette ist 99 Zeichen
    printf("Geben Sie eine Zeichenkette ein: ");
    scanf("%s", stringVariable);
    printf("Zeichenkette eingegeben: %s\n", stringVariable);

    return 0;
}
*/

Basic String Functions

int mystrlen(char *s)
{
    int i = 0;
    while (s[i] != '\0')
    {
        i++;
    }
    return i;
}

int mystrcpy(char *destination, char *source)
{
    for (int i = 0; i <= mystrlen(source); i++)
    {
        destination[i] = source[i];
    }
    return 0;
}

int mystrcmp(char *s1, char *s2)
{
    int difference = 0;
    for (int i = 0; i <= mystrlen(s1) && i <= mystrlen(s2); i++)
    {
        difference = s2[i] - s1[i];
        if (difference != 0)
        {
            return difference;
        }
    }
    return difference;
}



Advanced String Fuctions

int mystrcont(char *source, char *value)
{
    // We want to check if value is contained in source

    for (int i = 0; i < mystrlen(source); i++)
    {
        if (source[i] == value[0])
        {
            for (int j = 0; j < mystrlen(value); j++)
            {
                if (source[i+j] != value[j])
                {
                    break;
                }
                if (j == mystrlen(value)-1)
                {
                    return 1;
                }
            }
        }
    }

    return 0;
}

int mystrtrim(char *dest, char *src)
{
    // We want to copy src into dest, but without the leading and trailing spaces

    int i = 0;
    int j = 0;

    while (src[i] == ' ')
    {
        i++;
    }

    while (src[i] != '\0')
    {
        dest[j++] = src[i++];
    }

    while (j > 0 && dest[j - 1] == ' ')
    {
        j--;
    }

    dest[j] = '\0';
}

int mystrcatord(char *dest, char *s1, char *s2)
{
    // We have two orderer strings s1 and s2 (alphabetically)
    // We want to combine them into dest, also ordered

    int i = 0;
    int j = 0;
    int k = 0;

    while (s1[i] != '\0' && s2[j] != '\0')
    {
        if (s1[i] < s2[j])
        {
            dest[k] = s1[i];
            i++;
        }
        else
        {
            dest[k] = s2[j];
            j++;
        }
        k++;
    }

    while (s1[i] != '\0')
    {
        dest[k] = s1[i];
        i++;
        k++;
    }

    while (s2[j] != '\0')
    {
        dest[k] = s2[j];
        j++;
        k++;
    }

    dest[k] = '\0';

    return 0;
}
